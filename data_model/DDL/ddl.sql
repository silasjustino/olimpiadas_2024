  CREATE TABLE "ATLETA" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"NOME" VARCHAR2(200) NOT NULL ENABLE, 
	"NUM_DOCUMENTO" NUMBER NOT NULL ENABLE, 
	"ID_CATEGORIA" NUMBER NOT NULL ENABLE, 
	"ID_DELEGACAO" NUMBER NOT NULL ENABLE, 
	"DATA_NASCIMENTO" DATE NOT NULL ENABLE, 
	"NACIONALIDADE" VARCHAR2(200) NOT NULL ENABLE, 
	"PESO" NUMBER NOT NULL ENABLE, 
	"ALTURA" NUMBER NOT NULL ENABLE, 
	"FOTO" BLOB, 
	"FILENAME_FOTO" VARCHAR2(400), 
	"MIMETYPE_FOTO" VARCHAR2(255), 
	"IMG_LST_UPD_FOTO" DATE, 
	 CONSTRAINT "ATLETA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ATLETA_UN" UNIQUE ("NUM_DOCUMENTO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "DELEGACAO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"PAIS" VARCHAR2(200) NOT NULL ENABLE, 
	"BANDEIRA" BLOB, 
	"FILENAME_BANDEIRA" VARCHAR2(400), 
	"MIMETYPE_BANDEIRA" VARCHAR2(255), 
	"IMG_LST_UPD_BANDEIRA" DATE, 
	 CONSTRAINT "DELEGACAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "DELEGACAO_UN" UNIQUE ("PAIS")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "JURADO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"NOME" VARCHAR2(200) NOT NULL ENABLE, 
	"NUM_CERTIFICACAO" VARCHAR2(100) NOT NULL ENABLE, 
	"FOTO" BLOB, 
	"FILENAME_FOTO" VARCHAR2(400), 
	"MIMETYPE_FOTO" VARCHAR2(255), 
	"IMG_LST_UPD_FOTO" DATE, 
	"ID_DELEGACAO" NUMBER NOT NULL ENABLE, 
	"ID_CATEGORIA" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "JURADO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "JURADO_UN" UNIQUE ("NUM_CERTIFICACAO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MEMBRO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"NOME" VARCHAR2(200) NOT NULL ENABLE, 
	"NUM_DOCUMENTO" NUMBER NOT NULL ENABLE, 
	"ID_DELEGACAO" NUMBER NOT NULL ENABLE, 
	"DATA_NASCIMENTO" DATE NOT NULL ENABLE, 
	"NACIONALIDADE" VARCHAR2(200) NOT NULL ENABLE, 
	"FOTO" BLOB, 
	"FILENAME_FOTO" VARCHAR2(400), 
	"MIMETYPE_FOTO" VARCHAR2(255), 
	"IMG_LST_UPD_FOTO" DATE, 
	 CONSTRAINT "MEMBRO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MEMBRO_UN" UNIQUE ("NUM_DOCUMENTO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "ATLETA_COMPETICAO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_ATLETA" NUMBER NOT NULL ENABLE, 
	"ID_COMPETICAO" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "ATLETA_COMPETICAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ATLETA_COMPETICAO_UN" UNIQUE ("ID_ATLETA", "ID_COMPETICAO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "AUDITORIA" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"DATA" DATE NOT NULL ENABLE, 
	"DSC_MODIFICACAO" VARCHAR2(4000 CHAR) NOT NULL ENABLE, 
	"FEITO_POR" VARCHAR2(200) NOT NULL ENABLE, 
	 CONSTRAINT "AUDITORIA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "BATERIA" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_COMPETICAO" NUMBER NOT NULL ENABLE, 
	"ID_FASE" NUMBER NOT NULL ENABLE, 
	"DSC_BATERIA" VARCHAR2(100) NOT NULL ENABLE, 
	"DATA" DATE NOT NULL ENABLE, 
	"DURACAO" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "BATERIA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "CATEGORIA" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"SEXO" VARCHAR2(100) NOT NULL ENABLE, 
	 CONSTRAINT "CATEGORIA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CATEGORIA_UN" UNIQUE ("SEXO")
  USING INDEX  ENABLE, 
	 CONSTRAINT "CATEGORIA_CK_SEXO" CHECK ( "SEXO" IN ('Masculino', 'Feminino') ) ENABLE
   ) ;

  CREATE TABLE "COMPETICAO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_MODALIDADE" NUMBER NOT NULL ENABLE, 
	"ID_FASE" NUMBER NOT NULL ENABLE, 
	"ID_LOCAL" NUMBER NOT NULL ENABLE, 
	"ID_SITUACAO" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "COMPETICAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "COMPETICAO_UN" UNIQUE ("ID_MODALIDADE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "ESPORTE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"DSC_ESPORTE" VARCHAR2(100) NOT NULL ENABLE, 
	 CONSTRAINT "ESPORTE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "ESPORTE_UN" UNIQUE ("DSC_ESPORTE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "FASE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"DSC_FASE" VARCHAR2(100) NOT NULL ENABLE, 
	 CONSTRAINT "FASE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "FASE_UN" UNIQUE ("DSC_FASE")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "JURADO_BATERIA" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_JURADO" NUMBER NOT NULL ENABLE, 
	"ID_BATERIA" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "JURADO_BATERIA_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "JURADO_BATERIA_UN" UNIQUE ("ID_JURADO", "ID_BATERIA")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "LOCAL" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"DSC_LOCAL" VARCHAR2(200) NOT NULL ENABLE, 
	"ENDERECO" VARCHAR2(200) NOT NULL ENABLE, 
	 CONSTRAINT "LOCAL_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "LOCAL_UN" UNIQUE ("DSC_LOCAL")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "MODALIDADE" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_ESPORTE" NUMBER NOT NULL ENABLE, 
	"DSC_MODALIDADE" VARCHAR2(100) NOT NULL ENABLE, 
	"ID_CATEGORIA" NUMBER NOT NULL ENABLE, 
	"PARTICIPACAO" VARCHAR2(1) NOT NULL ENABLE, 
	"AVALIACAO" VARCHAR2(1) NOT NULL ENABLE, 
	 CONSTRAINT "MODALIDADE_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MODALIDADE_UN" UNIQUE ("ID_ESPORTE", "DSC_MODALIDADE", "ID_CATEGORIA")
  USING INDEX  ENABLE, 
	 CONSTRAINT "MODALIDADE_CK_PARTICIPACAO" CHECK ( "PARTICIPACAO" IN ('I','E') ) ENABLE, 
	 CONSTRAINT "MODALIDADE_CK_AVALIACAO" CHECK ( "AVALIACAO" IN ('P','T') ) ENABLE
   ) ;

  CREATE TABLE "PONTUACAO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_RESULTADO" NUMBER NOT NULL ENABLE, 
	"ID_JURADO" NUMBER, 
	"NOTA" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "PONTUACAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "PONTUACAO_UN" UNIQUE ("ID_RESULTADO")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "RESULTADO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"ID_ATLETA_COMPETICAO" NUMBER, 
	"ID_BATERIA" NUMBER NOT NULL ENABLE, 
	"COLOCACAO" NUMBER, 
	"TEMPO" VARCHAR2(12), 
	"ID_DELEGACAO" NUMBER, 
	"CLASSIFICACAO" VARCHAR2(1), 
	 CONSTRAINT "RESULTADO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "RESULTADO_CK_CLASSIFICACAO" CHECK ( "CLASSIFICACAO" IN ('C','D') ) ENABLE
   ) ;

  CREATE TABLE "RESULTADO_COMPETICAO" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"ID_COMPETICAO" NUMBER NOT NULL ENABLE, 
	"COLOCACAO" NUMBER NOT NULL ENABLE, 
	"ID_ATLETA_COMPETICAO" NUMBER, 
	"ID_DELEGACAO" NUMBER NOT NULL ENABLE, 
	"ID_RESULTADO" NUMBER NOT NULL ENABLE, 
	"ID_FASE" NUMBER NOT NULL ENABLE, 
	 CONSTRAINT "RESULTADO_COMPETICAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   ) ;

  CREATE TABLE "SITUACAO" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"DSC_SITUACAO" VARCHAR2(100) NOT NULL ENABLE, 
	 CONSTRAINT "SITUACAO_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "SITUACAO_UN" UNIQUE ("DSC_SITUACAO")
  USING INDEX  ENABLE
   ) ;

  ALTER TABLE "ATLETA" ADD CONSTRAINT "ATLETA_CATEGORIA_FK" FOREIGN KEY ("ID_CATEGORIA")
	  REFERENCES "CATEGORIA" ("ID") ENABLE;
  ALTER TABLE "ATLETA" ADD CONSTRAINT "ATLETA_DELEGACAO_FK" FOREIGN KEY ("ID_DELEGACAO")
	  REFERENCES "DELEGACAO" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "ATLETA_ID_TRG" BEFORE 
    INSERT ON atleta 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := atleta_id_seq.nextval; 
END; 

/
ALTER TRIGGER "ATLETA_ID_TRG" ENABLE;

  ALTER TABLE "ATLETA_COMPETICAO" ADD CONSTRAINT "ATLETA_COMPETICAO_ATLETA_FK" FOREIGN KEY ("ID_ATLETA")
	  REFERENCES "ATLETA" ("ID") ENABLE;
  ALTER TABLE "ATLETA_COMPETICAO" ADD CONSTRAINT "ATLETA_COMPETICAO_COMP_FK" FOREIGN KEY ("ID_COMPETICAO")
	  REFERENCES "COMPETICAO" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "ATLETA_COMPETICAO_ID_TRG" BEFORE 
    INSERT ON atleta_competicao 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := atleta_competicao_id_seq.nextval; 
END; 

/
ALTER TRIGGER "ATLETA_COMPETICAO_ID_TRG" ENABLE;

  ALTER TABLE "BATERIA" ADD CONSTRAINT "BATERIA_COMPETICAO_FK" FOREIGN KEY ("ID_COMPETICAO")
	  REFERENCES "COMPETICAO" ("ID") ENABLE;
  ALTER TABLE "BATERIA" ADD CONSTRAINT "BATERIA_FASE_FK" FOREIGN KEY ("ID_FASE")
	  REFERENCES "FASE" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BATERIA_ID_TRG" BEFORE 
    INSERT ON bateria 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := bateria_id_seq.nextval; 
END; 

/
ALTER TRIGGER "BATERIA_ID_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "CATEGORIA_ID_TRG" BEFORE 
    INSERT ON categoria 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := categoria_id_seq.nextval; 
END; 

/
ALTER TRIGGER "CATEGORIA_ID_TRG" ENABLE;

  ALTER TABLE "COMPETICAO" ADD CONSTRAINT "COMPETICAO_FASE_FK" FOREIGN KEY ("ID_FASE")
	  REFERENCES "FASE" ("ID") ENABLE;
  ALTER TABLE "COMPETICAO" ADD CONSTRAINT "COMPETICAO_LOCAL_FK" FOREIGN KEY ("ID_LOCAL")
	  REFERENCES "LOCAL" ("ID") ENABLE;
  ALTER TABLE "COMPETICAO" ADD CONSTRAINT "COMPETICAO_MODALIDADE_FK" FOREIGN KEY ("ID_MODALIDADE")
	  REFERENCES "MODALIDADE" ("ID") ENABLE;
  ALTER TABLE "COMPETICAO" ADD CONSTRAINT "COMPETICAO_SITUACAO_FK" FOREIGN KEY ("ID_SITUACAO")
	  REFERENCES "SITUACAO" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "COMPETICAO_ID_TRG" BEFORE 
    INSERT ON competicao 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := competicao_id_seq.nextval; 
END; 

/
ALTER TRIGGER "COMPETICAO_ID_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "DELEGACAO_ID_TRG" BEFORE 
    INSERT ON delegacao 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := delegacao_id_seq.nextval; 
END; 

/
ALTER TRIGGER "DELEGACAO_ID_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "ESPORTE_ID_TRG" BEFORE 
    INSERT ON esporte 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := esporte_id_seq.nextval; 
END; 

/
ALTER TRIGGER "ESPORTE_ID_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "FASE_ID_TRG" BEFORE 
    INSERT ON fase 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := fase_id_seq.nextval; 
END; 

/
ALTER TRIGGER "FASE_ID_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "JURADO_ID_TRG" BEFORE 
    INSERT ON jurado 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := jurado_id_seq.nextval; 
END; 

/
ALTER TRIGGER "JURADO_ID_TRG" ENABLE;

  ALTER TABLE "JURADO_BATERIA" ADD CONSTRAINT "JURADO_BATERIA_BATERIA_FK" FOREIGN KEY ("ID_BATERIA")
	  REFERENCES "BATERIA" ("ID") ENABLE;
  ALTER TABLE "JURADO_BATERIA" ADD CONSTRAINT "JURADO_BATERIA_JURADO_FK" FOREIGN KEY ("ID_JURADO")
	  REFERENCES "JURADO" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "JURADO_BATERIA_ID_TRG" BEFORE 
    INSERT ON jurado_bateria 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := jurado_bateria_id_seq.nextval; 
END; 

/
ALTER TRIGGER "JURADO_BATERIA_ID_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "LOCAL_ID_TRG" BEFORE 
    INSERT ON local 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := local_id_seq.nextval; 
END; 

/
ALTER TRIGGER "LOCAL_ID_TRG" ENABLE;

  ALTER TABLE "MEMBRO" ADD CONSTRAINT "MEMBRO_DELEGACAO_FK" FOREIGN KEY ("ID_DELEGACAO")
	  REFERENCES "DELEGACAO" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MEMBRO_ID_TRG" BEFORE 
    INSERT ON membro 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := membro_id_seq.nextval; 
END; 

/
ALTER TRIGGER "MEMBRO_ID_TRG" ENABLE;

  ALTER TABLE "MODALIDADE" ADD CONSTRAINT "MODALIDADE_CATEGORIA_FK" FOREIGN KEY ("ID_CATEGORIA")
	  REFERENCES "CATEGORIA" ("ID") ENABLE;
  ALTER TABLE "MODALIDADE" ADD CONSTRAINT "MODALIDADE_ESPORTE_FK" FOREIGN KEY ("ID_ESPORTE")
	  REFERENCES "ESPORTE" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "MODALIDADE_ID_TRG" BEFORE 
    INSERT ON modalidade 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := modalidade_id_seq.nextval; 
END; 

/
ALTER TRIGGER "MODALIDADE_ID_TRG" ENABLE;

  ALTER TABLE "PONTUACAO" ADD CONSTRAINT "PONTUACAO_JURADO_FK" FOREIGN KEY ("ID_JURADO")
	  REFERENCES "JURADO" ("ID") ENABLE;
  ALTER TABLE "PONTUACAO" ADD CONSTRAINT "PONTUACAO_RESULTADO_FK" FOREIGN KEY ("ID_RESULTADO")
	  REFERENCES "RESULTADO" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "PONTUACAO_ID_TRG" BEFORE 
    INSERT ON pontuacao 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := pontuacao_id_seq.nextval; 
END; 

/
ALTER TRIGGER "PONTUACAO_ID_TRG" ENABLE;

  ALTER TABLE "RESULTADO" ADD CONSTRAINT "RESULTADO_ATLETA_COMPETICAO_FK" FOREIGN KEY ("ID_ATLETA_COMPETICAO")
	  REFERENCES "ATLETA_COMPETICAO" ("ID") ENABLE;
  ALTER TABLE "RESULTADO" ADD CONSTRAINT "RESULTADO_BATERIA_FK" FOREIGN KEY ("ID_BATERIA")
	  REFERENCES "BATERIA" ("ID") ENABLE;
  ALTER TABLE "RESULTADO" ADD CONSTRAINT "RESULTADO_FK_DELEGACAO" FOREIGN KEY ("ID_DELEGACAO")
	  REFERENCES "DELEGACAO" ("ID") ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "RESULTADO_ID_TRG" BEFORE 
    INSERT ON resultado 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := resultado_id_seq.nextval; 
END; 

/
ALTER TRIGGER "RESULTADO_ID_TRG" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "SITUACAO_ID_TRG" BEFORE 
    INSERT ON situacao 
    FOR EACH ROW 
     WHEN ( new.id IS NULL ) BEGIN 
    :new.id := situacao_id_seq.nextval; 
END; 

/
ALTER TRIGGER "SITUACAO_ID_TRG" ENABLE;
create or replace FUNCTION f_aut_none (p_username IN VARCHAR2,
                                       p_password IN VARCHAR2)
return boolean
IS
BEGIN
    RETURN TRUE;
END;
/
create or replace function "F_QUERY_ATLETA"(p_id number, p_id_bateria number, p_id_delegacao number)
return varchar2
as
    v_id_competicao NUMBER;
    v_fase_bateria NUMBER;
    v_qtd_anteriores NUMBER;
    v_id_fase_anterior NUMBER;
begin
    
    SELECT id_fase, id_competicao
    INTO v_fase_bateria, v_id_competicao
    FROM BATERIA
    WHERE ID = p_id_bateria;

    SELECT count(1)
    INTO v_qtd_anteriores
    FROM BATERIA B
    JOIN COMPETICAO C ON C.ID = B.ID_COMPETICAO
    WHERE C.ID = v_id_competicao
    AND B.ID_FASE < v_fase_bateria;

    IF v_qtd_anteriores > 0 THEN
        IF v_fase_bateria = 5 THEN
            SELECT max(b.id_fase)
            INTO v_id_fase_anterior
            FROM BATERIA B
            JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
            WHERE C.ID = v_id_competicao
            AND b.id_fase < v_fase_bateria
            AND b.id_fase != 4;
        ELSE
            SELECT max(b.id_fase)
            INTO v_id_fase_anterior
            FROM BATERIA B
            JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
            WHERE C.ID = v_id_competicao
            AND b.id_fase < v_fase_bateria;
        END IF;
       
        IF p_id IS NULL THEN
            IF v_fase_bateria = 4 THEN
                return 'SELECT DISTINCT A.NOME, A.ID
                        FROM RESULTADO R
                        JOIN BATERIA B ON B.ID = R.ID_BATERIA
                        JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
                        JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                        JOIN ATLETA A ON AC.ID_ATLETA = A.ID
                        JOIN DELEGACAO D ON A.ID_DELEGACAO = D.ID
                        WHERE D.ID = ' || p_id_delegacao || ' 
                        AND C.ID = ' || v_id_competicao || ' 
                        AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                        AND R.CLASSIFICACAO = ''D''
                        AND A.ID NOT IN (SELECT AC.ID_ATLETA
                                         FROM BATERIA B
                                         JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                                         JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                                         WHERE B.ID = ' || p_id_bateria || ')';
            ELSE
                return 'SELECT DISTINCT A.NOME, A.ID
                        FROM RESULTADO R
                        JOIN BATERIA B ON B.ID = R.ID_BATERIA
                        JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
                        JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                        JOIN ATLETA A ON AC.ID_ATLETA = A.ID
                        JOIN DELEGACAO D ON A.ID_DELEGACAO = D.ID
                        WHERE D.ID = ' || p_id_delegacao || ' 
                        AND C.ID = ' || v_id_competicao || ' 
                        AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                        AND R.CLASSIFICACAO = ''C''
                        AND A.ID NOT IN (SELECT AC.ID_ATLETA
                                         FROM BATERIA B
                                         JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                                         JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                                         WHERE B.ID = ' || p_id_bateria || ')';
            END IF;
        ELSE
            IF v_fase_bateria = 4 THEN
                return 'SELECT DISTINCT A.NOME, A.ID
                        FROM RESULTADO R
                        JOIN BATERIA B ON B.ID = R.ID_BATERIA
                        JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
                        JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                        JOIN ATLETA A ON AC.ID_ATLETA = A.ID
                        JOIN DELEGACAO D ON A.ID_DELEGACAO = D.ID
                        WHERE D.ID = ' || p_id_delegacao || ' 
                        AND C.ID = ' || v_id_competicao || ' 
                        AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                        AND R.CLASSIFICACAO = ''D''';
            ELSE
                return 'SELECT DISTINCT A.NOME, A.ID
                        FROM RESULTADO R
                        JOIN BATERIA B ON B.ID = R.ID_BATERIA
                        JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
                        JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                        JOIN ATLETA A ON AC.ID_ATLETA = A.ID
                        JOIN DELEGACAO D ON A.ID_DELEGACAO = D.ID
                        WHERE D.ID = ' || p_id_delegacao || ' 
                        AND C.ID = ' || v_id_competicao || ' 
                        AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                        AND R.CLASSIFICACAO = ''C''';
            END IF;
        END IF;
            
    ELSE
        IF p_id IS NULL THEN
            return 'SELECT DISTINCT A.NOME, A.ID
                    FROM BATERIA B
                    JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
                    JOIN MODALIDADE M ON C.ID_MODALIDADE = M.ID
                    JOIN ATLETA A ON M.ID_CATEGORIA = A.ID_CATEGORIA
                    JOIN DELEGACAO D ON A.ID_DELEGACAO = D.ID
                    WHERE D.ID = ' || p_id_delegacao || '
                    AND B.ID = ' || p_id_bateria || ' 
                    AND A.ID NOT IN (SELECT AC.ID_ATLETA
                                     FROM BATERIA B
                                     JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                                     JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                                     WHERE B.ID = ' || p_id_bateria || ')';
    
        ELSE
            return 'SELECT DISTINCT A.NOME, A.ID
                    FROM BATERIA B
                    JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
                    JOIN MODALIDADE M ON C.ID_MODALIDADE = M.ID
                    JOIN ATLETA A ON M.ID_CATEGORIA = A.ID_CATEGORIA
                    JOIN DELEGACAO D ON A.ID_DELEGACAO = D.ID
                    WHERE D.ID = ' || p_id_delegacao || ' 
                    AND B.ID = ' || p_id_bateria;
        END IF;
    END IF;
EXCEPTION WHEN NO_DATA_FOUND THEN
    return 'SELECT A.NOME, A.ID
            FROM BATERIA B
            JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
            JOIN MODALIDADE M ON C.ID_MODALIDADE = M.ID
            JOIN ATLETA A ON M.ID_CATEGORIA = A.ID_CATEGORIA
            JOIN DELEGACAO D ON A.ID_DELEGACAO = D.ID
            WHERE D.ID = ' || p_id_delegacao || ' 
            AND B.ID = ' || p_id_bateria;

end "F_QUERY_ATLETA";
/
create or replace function "F_QUERY_DELEGACAO"(p_id_bateria number, p_id_delegacao number)
return varchar2
as
    v_eh_individual NUMBER;
    v_id_competicao NUMBER;
    v_fase_bateria NUMBER;
    v_qtd_anteriores NUMBER;
    v_id_fase_anterior NUMBER;
begin
    -- Verifica se bateria é individual ou em equipe
    SELECT count(1)
    INTO v_eh_individual
    FROM BATERIA B
    JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
    JOIN MODALIDADE M ON C.ID_MODALIDADE = M.ID
    WHERE B.ID = p_id_bateria
    AND PARTICIPACAO = 'I';

    -- Verifica fase da bateria atual
    SELECT id_fase, id_competicao
    INTO v_fase_bateria, v_id_competicao
    FROM BATERIA
    WHERE ID = p_id_bateria;

    --Verifica se existem baterias dessa competição com fase anterior
    SELECT count(1)
    INTO v_qtd_anteriores
    FROM BATERIA B
    JOIN COMPETICAO C ON C.ID = B.ID_COMPETICAO
    WHERE C.ID = v_id_competicao
    AND B.ID_FASE < v_fase_bateria;

    -- Se existem baterias com fases anteriores
    IF v_qtd_anteriores > 0 THEN
        -- Recupera fase anterior mais recente
        IF v_fase_bateria = 5 THEN
            SELECT max(b.id_fase)
            INTO v_id_fase_anterior
            FROM BATERIA B
            JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
            WHERE C.ID = v_id_competicao
            AND b.id_fase < v_fase_bateria
            AND b.id_fase != 4;
        ELSE
            SELECT max(b.id_fase)
            INTO v_id_fase_anterior
            FROM BATERIA B
            JOIN COMPETICAO C ON B.ID_COMPETICAO = C.ID
            WHERE C.ID = v_id_competicao
            AND b.id_fase < v_fase_bateria;
        END IF;

        -- Recupera delegações das baterias dessa fase que foram classificadas

        IF v_eh_individual > 0 THEN
            IF v_fase_bateria = 4 THEN
                return 'SELECT DISTINCT D.PAIS, D.ID
                        FROM COMPETICAO C
                        JOIN BATERIA B ON C.ID = B.ID_COMPETICAO
                        JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                        JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                        JOIN ATLETA A ON A.ID = AC.ID_ATLETA
                        JOIN DELEGACAO D ON D.ID = A.ID_DELEGACAO
                        WHERE C.ID = ' || v_id_competicao || '
                         AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                        AND R.CLASSIFICACAO = ''D''';
            ELSE
                return 'SELECT DISTINCT D.PAIS, D.ID
                        FROM COMPETICAO C
                        JOIN BATERIA B ON C.ID = B.ID_COMPETICAO
                        JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                        JOIN ATLETA_COMPETICAO AC ON AC.ID = R.ID_ATLETA_COMPETICAO
                        JOIN ATLETA A ON A.ID = AC.ID_ATLETA
                        JOIN DELEGACAO D ON D.ID = A.ID_DELEGACAO
                        WHERE C.ID = ' || v_id_competicao || '
                         AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                        AND R.CLASSIFICACAO = ''C''';
            END IF;
        ELSE
            IF p_id_delegacao IS NULL THEN
                IF v_fase_bateria = 4 THEN
                    return 'SELECT DISTINCT D.PAIS, D.ID
                            FROM COMPETICAO C
                            JOIN BATERIA B ON C.ID = B.ID_COMPETICAO
                            JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                            JOIN DELEGACAO D ON D.ID = R.ID_DELEGACAO
                            WHERE C.ID = ' || v_id_competicao || '
                             AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                            AND R.CLASSIFICACAO = ''D''
                            AND D.ID NOT IN (SELECT ID_DELEGACAO
                                               FROM RESULTADO R
                                               WHERE ID_BATERIA = ' || p_id_bateria || ')';
                ELSE
                    return 'SELECT DISTINCT D.PAIS, D.ID
                            FROM COMPETICAO C
                            JOIN BATERIA B ON C.ID = B.ID_COMPETICAO
                            JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                            JOIN DELEGACAO D ON D.ID = R.ID_DELEGACAO
                            WHERE C.ID = ' || v_id_competicao || '
                             AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                            AND R.CLASSIFICACAO = ''C''
                            AND D.ID NOT IN (SELECT ID_DELEGACAO
                                               FROM RESULTADO R
                                               WHERE ID_BATERIA = ' || p_id_bateria || ')';
                END IF;
            ELSE
                IF v_fase_bateria = 4 THEN
                    return 'SELECT DISTINCT D.PAIS, D.ID
                            FROM COMPETICAO C
                            JOIN BATERIA B ON C.ID = B.ID_COMPETICAO
                            JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                            JOIN DELEGACAO D ON D.ID = R.ID_DELEGACAO
                            WHERE C.ID = ' || v_id_competicao || '
                             AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                            AND R.CLASSIFICACAO = ''D''';
                ELSE
                    return 'SELECT DISTINCT D.PAIS, D.ID
                            FROM COMPETICAO C
                            JOIN BATERIA B ON C.ID = B.ID_COMPETICAO
                            JOIN RESULTADO R ON R.ID_BATERIA = B.ID
                            JOIN DELEGACAO D ON D.ID = R.ID_DELEGACAO
                            WHERE C.ID = ' || v_id_competicao || '
                             AND B.ID_FASE = ' || v_id_fase_anterior || ' 
                            AND R.CLASSIFICACAO = ''C''';
                END IF;
            END IF;
            
        END IF;
    -- Se não existem baterias com fases anteriores
    ELSE
        IF p_id_delegacao IS NULL AND v_eh_individual = 0 THEN
            return 'SELECT D.PAIS, D.ID
                    FROM DELEGACAO D
                    WHERE D.ID NOT IN (SELECT ID_DELEGACAO
                                       FROM RESULTADO R
                                       WHERE ID_BATERIA = ' || p_id_bateria || ')';
        ELSE
            return 'SELECT D.PAIS, D.ID
                    FROM DELEGACAO D';
        END IF;
    END IF;
EXCEPTION WHEN NO_DATA_FOUND THEN
    return 'SELECT PAIS, ID
            FROM DELEGACAO';
end "F_QUERY_DELEGACAO";
/




























































































  CREATE UNIQUE INDEX "ATLETA_COMPETICAO_PK" ON "ATLETA_COMPETICAO" ("ID") 
  ;

  CREATE UNIQUE INDEX "ATLETA_COMPETICAO_UN" ON "ATLETA_COMPETICAO" ("ID_ATLETA", "ID_COMPETICAO") 
  ;

  CREATE UNIQUE INDEX "ATLETA_PK" ON "ATLETA" ("ID") 
  ;

  CREATE UNIQUE INDEX "ATLETA_UN" ON "ATLETA" ("NUM_DOCUMENTO") 
  ;

  CREATE UNIQUE INDEX "AUDITORIA_PK" ON "AUDITORIA" ("ID") 
  ;

  CREATE UNIQUE INDEX "BATERIA_PK" ON "BATERIA" ("ID") 
  ;

  CREATE UNIQUE INDEX "CATEGORIA_PK" ON "CATEGORIA" ("ID") 
  ;

  CREATE UNIQUE INDEX "CATEGORIA_UN" ON "CATEGORIA" ("SEXO") 
  ;

  CREATE UNIQUE INDEX "COMPETICAO_PK" ON "COMPETICAO" ("ID") 
  ;

  CREATE UNIQUE INDEX "COMPETICAO_UN" ON "COMPETICAO" ("ID_MODALIDADE") 
  ;

  CREATE UNIQUE INDEX "DELEGACAO_PK" ON "DELEGACAO" ("ID") 
  ;

  CREATE UNIQUE INDEX "DELEGACAO_UN" ON "DELEGACAO" ("PAIS") 
  ;

  CREATE UNIQUE INDEX "ESPORTE_PK" ON "ESPORTE" ("ID") 
  ;

  CREATE UNIQUE INDEX "ESPORTE_UN" ON "ESPORTE" ("DSC_ESPORTE") 
  ;

  CREATE UNIQUE INDEX "FASE_PK" ON "FASE" ("ID") 
  ;

  CREATE UNIQUE INDEX "FASE_UN" ON "FASE" ("DSC_FASE") 
  ;

  CREATE UNIQUE INDEX "JURADO_BATERIA_PK" ON "JURADO_BATERIA" ("ID") 
  ;

  CREATE UNIQUE INDEX "JURADO_BATERIA_UN" ON "JURADO_BATERIA" ("ID_JURADO", "ID_BATERIA") 
  ;

  CREATE UNIQUE INDEX "JURADO_PK" ON "JURADO" ("ID") 
  ;

  CREATE UNIQUE INDEX "JURADO_UN" ON "JURADO" ("NUM_CERTIFICACAO") 
  ;

  CREATE UNIQUE INDEX "LOCAL_PK" ON "LOCAL" ("ID") 
  ;

  CREATE UNIQUE INDEX "LOCAL_UN" ON "LOCAL" ("DSC_LOCAL") 
  ;

  CREATE UNIQUE INDEX "MEMBRO_PK" ON "MEMBRO" ("ID") 
  ;

  CREATE UNIQUE INDEX "MEMBRO_UN" ON "MEMBRO" ("NUM_DOCUMENTO") 
  ;

  CREATE UNIQUE INDEX "MODALIDADE_PK" ON "MODALIDADE" ("ID") 
  ;

  CREATE UNIQUE INDEX "MODALIDADE_UN" ON "MODALIDADE" ("ID_ESPORTE", "DSC_MODALIDADE", "ID_CATEGORIA") 
  ;

  CREATE UNIQUE INDEX "PONTUACAO_PK" ON "PONTUACAO" ("ID") 
  ;

  CREATE UNIQUE INDEX "PONTUACAO_UN" ON "PONTUACAO" ("ID_RESULTADO") 
  ;

  CREATE UNIQUE INDEX "RESULTADO_COMPETICAO_PK" ON "RESULTADO_COMPETICAO" ("ID") 
  ;

  CREATE UNIQUE INDEX "RESULTADO_PK" ON "RESULTADO" ("ID") 
  ;

  CREATE UNIQUE INDEX "SITUACAO_PK" ON "SITUACAO" ("ID") 
  ;

  CREATE UNIQUE INDEX "SITUACAO_UN" ON "SITUACAO" ("DSC_SITUACAO") 
  ;



































create or replace PROCEDURE PROC_CLASSIFICACAO_PONTUACAO (p_id_bateria NUMBER, p_qtd_classificados NUMBER) AS
BEGIN

    FOR cur IN (SELECT ROWNUM, ID FROM 
                (SELECT R.ID
                FROM RESULTADO R
                JOIN PONTUACAO P ON P.ID_RESULTADO = R.ID
                WHERE ID_BATERIA = p_id_bateria ORDER BY NOTA DESC)
    ) LOOP
        UPDATE RESULTADO
        SET COLOCACAO = cur.ROWNUM
        WHERE ID = cur.ID;

        IF cur.ROWNUM <= p_qtd_classificados THEN
            UPDATE RESULTADO
            SET CLASSIFICACAO = 'C'
            WHERE ID = cur.ID;
        ELSE
            UPDATE RESULTADO
            SET CLASSIFICACAO = 'D'
            WHERE ID = cur.ID;
        END IF;
    END LOOP;

END PROC_CLASSIFICACAO_PONTUACAO;
/
create or replace PROCEDURE PROC_CLASSIFICACAO_TEMPO (p_id_bateria NUMBER, p_qtd_classificados NUMBER) AS
BEGIN

    FOR cur IN (SELECT ROWNUM, ID FROM
                    (SELECT R.ID
                     FROM RESULTADO R
                     WHERE ID_BATERIA = p_id_bateria ORDER BY TEMPO ASC)  
    ) LOOP
        UPDATE RESULTADO
        SET COLOCACAO = cur.ROWNUM
        WHERE ID = cur.ID;

        IF cur.ROWNUM <= p_qtd_classificados THEN
            UPDATE RESULTADO
            SET CLASSIFICACAO = 'C'
            WHERE ID = cur.ID;
        ELSE
            UPDATE RESULTADO
            SET CLASSIFICACAO = 'D'
            WHERE ID = cur.ID;
        END IF;
    END LOOP;

END PROC_CLASSIFICACAO_TEMPO;
/
create or replace procedure "PROC_RESULTADO_COMPETICAO" (
    p_id_competicao in number )
as
    i number := 1;
    v_ja_existe number;
    v_participacao varchar2(1);
    v_avaliacao varchar2(1);
	v_tab_classificacao t_tab_classificacao_competicao := t_tab_classificacao_competicao();
begin
    -- Recupera participacao e avaliacao
    select participacao, avaliacao
    into v_participacao, v_avaliacao
    from competicao c
    join modalidade m on c.id_modalidade = m.id
    where c.id = p_id_competicao;

    -- Percorre todas as fases dessa competição que possuem resultado e classificacao
    for fase in (select distinct b.id_fase
                from bateria b
                join resultado r on r.id_bateria = b.id
                where id_competicao = p_id_competicao
                and r.classificacao is not null
                order by id_fase desc
                )
    loop

        if v_participacao = 'I' then

            if v_avaliacao = 'P' then

                -- Pega todos classificados da fase atual já ordenados por pontuação
                for res in (
                    select r.id, r.id_atleta_competicao, a.id_delegacao
                    from resultado r
                    join pontuacao p on p.id_resultado = r.id
                    join atleta_competicao ac on r.id_atleta_competicao = ac.id
                    join atleta a on ac.id_atleta = a.id
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'C'
                    order by p.nota desc
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_atleta_competicao = res.id_atleta_competicao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    res.id_atleta_competicao, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                  );
                        i := i + 1;
                    end if;

                end loop;

                -- Pega todos desclassificados da fase atual já ordenados por pontuação
                for res in (
                    select r.id, r.id_atleta_competicao, a.id_delegacao
                    from resultado r
                    join pontuacao p on p.id_resultado = r.id
                    join atleta_competicao ac on r.id_atleta_competicao = ac.id
                    join atleta a on ac.id_atleta = a.id
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'D'
                    order by p.nota desc
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_atleta_competicao = res.id_atleta_competicao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    res.id_atleta_competicao, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                    );
                        i := i + 1;
                    end if;

                end loop;

            else

                -- Pega todos classificados da fase atual já ordenados por tempo
                for res in (
                    select r.id, r.id_atleta_competicao, a.id_delegacao
                    from resultado r
                    join atleta_competicao ac on r.id_atleta_competicao = ac.id
                    join atleta a on ac.id_atleta = a.id
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'C'
                    order by tempo
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_atleta_competicao = res.id_atleta_competicao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    res.id_atleta_competicao, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                  );
                        i := i + 1;
                    end if;

                end loop;

                -- Pega todos desclassificados da fase atual já ordenados por tempo
                for res in (
                    select r.id, r.id_atleta_competicao, a.id_delegacao
                    from resultado r
                    join atleta_competicao ac on r.id_atleta_competicao = ac.id
                    join atleta a on ac.id_atleta = a.id
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'D'
                    order by tempo
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_atleta_competicao = res.id_atleta_competicao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    res.id_atleta_competicao, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                    );
                        i := i + 1;
                    end if;

                end loop;

            end if;

        -- Se for em equipe
        else

            if v_avaliacao = 'P' then

                -- Pega todos classificados da fase atual já ordenados
                for res in (
                    select r.id, r.id_delegacao
                    from resultado r
                    join pontuacao p on p.id_resultado = r.id
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'C'
                    order by p.nota desc
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_delegacao = res.id_delegacao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    null, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                    );
                        i := i + 1;
                    end if;

                end loop;

                -- Pega todos desclassificados da fase atual já ordenados
                for res in (
                    select r.id, r.id_delegacao
                    from resultado r
                    join pontuacao p on p.id_resultado = r.id
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'D'
                    order by p.nota desc
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_delegacao = res.id_delegacao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    null, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                    );
                        i := i + 1;
                    end if;

                end loop;

            else

                -- Pega todos classificados da fase atual já ordenados
                for res in (
                    select r.id, r.id_delegacao
                    from resultado r
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'C'
                    order by tempo
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_delegacao = res.id_delegacao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    null, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                    );
                        i := i + 1;
                    end if;

                end loop;

                -- Pega todos desclassificados da fase atual já ordenados
                for res in (
                    select r.id, r.id_delegacao
                    from resultado r
                    join bateria b on b.id = r.id_bateria
                    where b.id_fase = fase.id_fase
                    and b.id_competicao = p_id_competicao
                    and r.classificacao = 'D'
                    order by tempo
                ) loop

                    -- Verifica se o atleta já está na collection
                    select count(1)
                    into v_ja_existe
                    from table(v_tab_classificacao)
                    where id_delegacao = res.id_delegacao;

                    -- Se não existe, adiciona
                    if v_ja_existe = 0 then
                        -- Se não estiver, adiciona
                        v_tab_classificacao.extend();
                        v_tab_classificacao(i) := t_obj_classificacao_competicao(
                                                    p_id_competicao,
                                                    res.id,
                                                    i, 
                                                    null, 
                                                    res.id_delegacao,
                                                    fase.id_fase
                                                    );
                        i := i + 1;
                    end if;

                end loop;

            end if;

        end if;

    end loop;

    delete from resultado_competicao
    where id_competicao = p_id_competicao;

    for i in 1..v_tab_classificacao.count loop
        insert into resultado_competicao (id_competicao, id_resultado, colocacao, id_atleta_competicao, id_delegacao, id_fase)
        values (
            v_tab_classificacao(i).id_competicao,
            v_tab_classificacao(i).id_resultado,
            v_tab_classificacao(i).colocacao,
            v_tab_classificacao(i).id_atleta_competicao,
            v_tab_classificacao(i).id_delegacao,
            v_tab_classificacao(i).id_fase
        );
    end loop;

end "PROC_RESULTADO_COMPETICAO";
/

























































   CREATE SEQUENCE  "ATLETA_COMPETICAO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 266 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "ATLETA_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8001 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "BATERIA_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 109 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "CATEGORIA_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 5 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "COMPETICAO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 92 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "DELEGACAO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 202 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "DEPT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 50 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "EMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 8000 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "ESPORTE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 36 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "FASE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "JURADO_BATERIA_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "JURADO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 29 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "LOCAL_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "MEMBRO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1996 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "MODALIDADE_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 281 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "PONTUACAO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 249 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "RESULTADO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 393 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "SITUACAO_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  ORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;












































































create or replace TRIGGER atleta_competicao_id_trg BEFORE 
    INSERT ON atleta_competicao 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := atleta_competicao_id_seq.nextval; 
END; 
/
create or replace TRIGGER atleta_id_trg BEFORE 
    INSERT ON atleta 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := atleta_id_seq.nextval; 
END; 
/
create or replace TRIGGER bateria_id_trg BEFORE 
    INSERT ON bateria 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := bateria_id_seq.nextval; 
END; 
/
create or replace TRIGGER categoria_id_trg BEFORE 
    INSERT ON categoria 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := categoria_id_seq.nextval; 
END; 
/
create or replace TRIGGER competicao_id_trg BEFORE 
    INSERT ON competicao 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := competicao_id_seq.nextval; 
END; 
/
create or replace TRIGGER delegacao_id_trg BEFORE 
    INSERT ON delegacao 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := delegacao_id_seq.nextval; 
END; 
/
create or replace TRIGGER esporte_id_trg BEFORE 
    INSERT ON esporte 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := esporte_id_seq.nextval; 
END; 
/
create or replace TRIGGER fase_id_trg BEFORE 
    INSERT ON fase 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := fase_id_seq.nextval; 
END; 
/
create or replace TRIGGER jurado_bateria_id_trg BEFORE 
    INSERT ON jurado_bateria 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := jurado_bateria_id_seq.nextval; 
END; 
/
create or replace TRIGGER jurado_id_trg BEFORE 
    INSERT ON jurado 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := jurado_id_seq.nextval; 
END; 
/
create or replace TRIGGER local_id_trg BEFORE 
    INSERT ON local 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := local_id_seq.nextval; 
END; 
/
create or replace TRIGGER membro_id_trg BEFORE 
    INSERT ON membro 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := membro_id_seq.nextval; 
END; 
/
create or replace TRIGGER modalidade_id_trg BEFORE 
    INSERT ON modalidade 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := modalidade_id_seq.nextval; 
END; 
/
create or replace TRIGGER pontuacao_id_trg BEFORE 
    INSERT ON pontuacao 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := pontuacao_id_seq.nextval; 
END; 
/
create or replace TRIGGER resultado_id_trg BEFORE 
    INSERT ON resultado 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := resultado_id_seq.nextval; 
END; 
/
create or replace TRIGGER situacao_id_trg BEFORE 
    INSERT ON situacao 
    FOR EACH ROW 
    WHEN ( new.id IS NULL ) 
BEGIN 
    :new.id := situacao_id_seq.nextval; 
END; 
/






























































































create or replace type t_obj_classificacao_competicao 
as object(id_competicao number, id_resultado number, colocacao number, id_atleta_competicao number, id_delegacao number, id_fase number)
/
create or replace type t_tab_classificacao_competicao as table of t_obj_classificacao_competicao
/





























































































